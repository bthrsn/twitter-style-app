{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","likedPosts","allPosts","className","SearchPanel","state","term","onUpdateSearch","e","target","value","setState","props","onUpdateSearchPanel","type","placeholder","onChange","this","Component","PostStatusFilter","buttons","name","label","map","color","filter","onFilterSelect","onClick","PostListItem","onDelete","onToggleImportant","onToggleLiked","classNames","important","like","PostlistItem","posts","elements","post","obj","key","isEmpty","id","postProps","ListGroup","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","nextId","deleteItem","index","findIndex","elem","before","slice","after","addItem","body","newItem","oldItem","searchPosts","items","length","item","indexOf","filterPosts","visiblePosts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e7f019d.chunk.js","sourcesContent":["import AppHeader from './app-header';\r\nexport default AppHeader;","import React from 'react';\r\n\r\nimport './app-header.sass';\r\n\r\nconst AppHeader = ({likedPosts, allPosts}) => {\r\n  return (\r\n    <div className=\"app-header d-flex\">\r\n      <h1>Mikhail Liakhovets</h1>\r\n      <h2>Записей: {allPosts}, из них понравилось: {likedPosts}</h2>\r\n    </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\nexport default SearchPanel;","import React, {Component} from 'react';\r\nimport './search-panel.sass';\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\nstate = {\r\n  term: ''\r\n}\r\n\r\nonUpdateSearch = (e) => {\r\n  const term = e.target.value;\r\n  this.setState({term});\r\n  // Это функция из компонента app\r\n  this.props.onUpdateSearchPanel(term);\r\n}\r\n\r\n render() { \r\n   return (\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Поиск по записям\"\r\n        className=\"form-control searh-input\"\r\n        onChange={this.onUpdateSearch}\r\n      />\r\n    )\r\n  }\r\n}\r\n","import PostStatusFilter from './post-status-filter';\r\nexport default PostStatusFilter;","import React, {Component} from 'react';\r\n\r\nimport './post-status-filter.sass';\r\n\r\nexport default class PostStatusFilter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.buttons = [\r\n        {name: 'all', label: 'Все'},\r\n        {name: 'like', label: 'Понравилось'}\r\n    ]\r\n  }\r\n  render() {  \r\n    const buttons = this.buttons.map(({name, color, label}) => {\r\n    const {filter, onFilterSelect} = this.props,\r\n          active = filter === name,\r\n          className = active ? 'btn-info' : 'btn-outline-secondary';\r\n      return (\r\n        <button \r\n          type=\"button\" \r\n          key={name} \r\n          className={`btn ${className}`}\r\n          onClick={() => onFilterSelect(name)}\r\n        >\r\n          {label}\r\n        </button>\r\n      \r\n      )\r\n    })\r\n    return ( \r\n      <div className=\"btn-group\">\r\n        {buttons}\r\n      </div>\r\n      )}\r\n}\r\n ","import PostListItem from './post-list-item';\r\nexport default PostListItem;","import React from 'react';\r\nimport './post-list-item.sass';\r\n\r\nconst PostListItem = ({label, onDelete, onToggleImportant, onToggleLiked, important, like}) => {\r\n\r\n  // Переменная для добавления классов в пост\r\n  let classNames = 'app-list-item d-flex justify-content-between';\r\n  if (important) {\r\n    classNames +=' important';\r\n  }\r\n  if (like) {\r\n    classNames +=' like';\r\n  }\r\n\r\n  return ( \r\n    <div className={classNames}>\r\n      <span \r\n      className=\"app-list-item-label\"\r\n      onClick={onToggleLiked}>\r\n        {label}\r\n      </span>\r\n      <div className=\"d-flex justify-content-center align-items-center\">\r\n        <button \r\n        type=\"button\" \r\n        className=\"btn-star btn-sm\"\r\n        // Переключение поста на важный и наоборот\r\n        onClick={onToggleImportant}>\r\n          <i className=\"fa fa-star\"></i>\r\n        </button>\r\n        <button \r\n        type=\"button\" \r\n        className=\"btn-trash btn-sm\"\r\n        // Добавим событие6 удаление постов по клику, если бы не было деструктуризации выше - надо было бы писать this.props.onDelete\r\n        onClick={onDelete}>\r\n          <i className=\"fa fa-trash-o\"></i>\r\n        </button>\r\n          <i className=\"fa fa-heart\"></i>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n  \r\nexport default PostListItem;","import PostlistItem from './post-list';\r\nexport default PostlistItem;","import React from 'react';\r\nimport PostListItem from '../post-list-item';\r\nimport { ListGroup } from 'reactstrap';\r\nimport './post-list.sass';\r\n\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked}) => {\r\n  \r\n  // Переменная для перебора массива с постами\r\n  const elements = posts\r\n  // Проверка на наличие в data только объектов с информацией внутри\r\n    .filter(post => typeof(post) === \"object\" && isEmpty(post))\r\n    .map(post => {\r\n    // Отделим id от остальных элементов post\r\n    const {id, ...postProps} = post;\r\n      return (<li key={id} className=\"list-group-item\">\r\n                <PostListItem \r\n                  {...postProps} \r\n                  // Cвойство элемента для удаления поста, которое определяет пост по id, который мы передаем выше\r\n                  onDelete={() => onDelete(id)}\r\n                  onToggleImportant={() => onToggleImportant(id)}\r\n                  onToggleLiked={() => onToggleLiked(id)} />\r\n              </li>)\r\n    })\r\n  \r\n  function isEmpty(obj) {\r\n    for(let key in obj) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  return ( \r\n    <ListGroup className=\"app-list\">\r\n      {elements}\r\n    </ListGroup>\r\n  );\r\n}\r\n \r\nexport default PostList;","import PostAddForm from './post-add-form';\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\nimport './post-add-form.sass';\r\n\r\nexport default class PostAddForm extends Component {\r\n  \r\n  state = {\r\n    text: ''\r\n  }\r\n  \r\n  onValueChange = (e) => {\r\n    this.setState({\r\n    // Так как каждое следуещее зхначение не зависит от предыдущего, то мы можем записать setState напрямую. И таким образом, мы будем каждый раз, когда печатаем в форму новый текст, обновлять state\r\n      text: e.target.value\r\n    });\r\n  }\r\n  \r\n  onSubmit = (e) => {\r\n    // На событие отправки формы нужно обязательно тменять перезагрузку страницы с помощью метода preventDefault для события\r\n    e.preventDefault();\r\n    // Так как вводимы текст идет в state - его и используем\r\n    this.props.onAdd(this.state.text);\r\n    this.setState({\r\n      text: ''\r\n    })\r\n  }\r\n  \r\n  render() { \r\n    return ( \r\n      <form \r\n        className=\"bottom-panel d-flex\"\r\n        // Событие submit нужно вешать именно на форму\r\n        onSubmit={this.onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"О чем вы думаете сейчас?\"    \r\n          className=\"form-control new-post-label\"\r\n          onChange={this.onValueChange}\r\n          // Таким образом мы сможем управлять значением state, чтобы очищать его после ввода текста\r\n          value={this.state.text}\r\n        />\r\n        <button\r\n        type=\"submit\"\r\n        className=\"btn btn-outline-secondary\">\r\n        Добавить\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n","import App from './app';\r\nexport default App;\r\n\r\n","import React, { Component } from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-status-filter';\r\nimport PostList from \"../post-list\";\r\nimport PostAddForm from \"../post-add-form\";\r\n\r\nimport './app.sass';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n    data: [\r\n      { label: \"Start to learn React\", important: false, like: false, id: nextId() },\r\n      { label: \"Now I know about state in React\", important: false, like: false, id: nextId() },\r\n      { label: \"Need a break to play Destiny 2\", important: false, like: false, id: nextId() },\r\n    ],\r\n    // Это строка поиска\r\n    term: '',\r\n    filter: 'all'\r\n  }\r\n  \r\n  deleteItem = (id) => {\r\n    this.setState(({data}) => {\r\n      // Узнать на каком месте стоит наш элемент с помощью метода findIndex\r\n        const index = data.findIndex(elem => elem.id === id),\r\n              // Так как state напрямую менять нельзя - нужно использовать промежуточные переменные, потому мы сначала создаем новый массив, а потом передаем его в data в state\r\n              before = data.slice(0, index),\r\n              after = data.slice(index + 1),\r\n              newArr = [...before, ...after];\r\n              \r\n        return {\r\n          data: newArr\r\n        }\r\n        \r\n    });\r\n  }\r\n  \r\n  addItem = (body) => {\r\n    const newItem =  {\r\n      label: body,\r\n      important: false,\r\n      id: nextId()\r\n    }\r\n    \r\n    this.setState(({data}) => {\r\n      const newData = [...data, newItem];\r\n      \r\n      return {\r\n        data: newData\r\n      }\r\n    })\r\n  }\r\n    \r\n  onToggleImportant = (id) => {\r\n  \r\n    this.setState(({data}) => {\r\n      // Находим индекс элемента по переданному id\r\n      const index = data.findIndex(elem => elem.id === id),\r\n      // Записываем его в переменную\r\n            oldItem = data[index],\r\n      // Перезаписываем свойство like этого элемента через новую переменную\r\n            newItem = {...oldItem, important: !oldItem.important},\r\n      // Заменяем старый элемент на новый в state через новую переменную\r\n            newData = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\r\n      \r\n      return {\r\n        data: newData\r\n      }        \r\n    });\r\n  }\r\n  \r\n  onToggleLiked = (id) => {\r\n    this.setState(({data}) => {\r\n      // Находим индекс элемента по переданному id\r\n      const index = data.findIndex(elem => elem.id === id),\r\n      // Записываем его в переменную\r\n            oldItem = data[index],\r\n      // Перезаписываем свойство like этого элемента через новую переменную\r\n            newItem = {...oldItem, like: !oldItem.like},\r\n      // Заменяем старый элемент на новый в state через новую переменную\r\n            newData = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\r\n      \r\n      return {\r\n        data: newData\r\n      }        \r\n    });\r\n  }\r\n\r\n  // Функция для поиска\r\n  searchPosts = (items, term) => {\r\n    \r\n    if (term.length === 0) {\r\n      return items\r\n    }\r\n    \r\n    return items.filter(item => item.label.indexOf(term) > -1);\r\n  }\r\n  \r\n  filterPosts = (items, filter) => {\r\n  if (filter === 'like') {\r\n    return items.filter(item => item.like)\r\n  } else {\r\n    return items\r\n  }\r\n}\r\n  \r\n  onUpdateSearchPanel = (term) => {\r\n    this.setState({term})\r\n  }\r\n  \r\n  onFilterSelect = (filter) => {\r\n    this.setState({filter})\r\n  }\r\n  \r\n  render() {\r\n  \r\n  // переменные для общего количесива постов и количества лайкнутых постов\r\n  const {data, term, filter} = this.state,\r\n        likedPosts  = data.filter(elem => elem.like).length,\r\n        allPosts = data.length,\r\n        visiblePosts = this.filterPosts(this.searchPosts(data, term), filter);\r\n  \r\n    return (\r\n      <div className=\"app\">\r\n        <AppHeader\r\n        likedPosts={likedPosts}\r\n        allPosts={allPosts} />\r\n        <div className=\"search-panel d-flex\">\r\n          <SearchPanel\r\n            onUpdateSearchPanel={this.onUpdateSearchPanel} />\r\n          <PostStatusFilter\r\n          filter={filter} \r\n          onFilterSelect={this.onFilterSelect} />\r\n        </div>\r\n        <PostList \r\n          posts = {visiblePosts}\r\n          // Передаем функцию для удаления как props объекта PostList\r\n          onDelete = {this.deleteItem} \r\n          onToggleImportant={this.onToggleImportant}\r\n          onToggleLiked={this.onToggleLiked} />\r\n        <PostAddForm\r\n        onAdd={this.addItem} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.sass';\nimport App from './components/app/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}